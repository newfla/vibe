name: Windows Non avx2, cuda, portable

on:
    workflow_dispatch:
      inputs:
        skip-publish:
            description: 'Skip publish'
            required: false
            default: '0'
jobs:
    publish-tauri:
        permissions:
            contents: write
        strategy:
            fail-fast: false
            matrix:
                include:
                    # Windows no AVX2
                    - platform: "windows-latest"
                      args: '--features="opencl"'
                      pre-build-args: "--older-cpu --opencl --openblas"
                      rust-version: "stable"
                    
                    # Windows cuda 12.5.0
                    - platform: "windows-latest"
                      args: '--features="cuda,openblas"'
                      pre-build-args: "--cuda --openblas"
                      name: 'cuda-12.5.0'
                      cuda-verison: '12.5.0'
                      rust-version: "stable"

                    # Windows cuda 11.8.0
                    - platform: "windows-latest"
                      args: '--features="cuda,openblas"'
                      pre-build-args: "--cuda"
                      name: 'cuda-11.8.0'
                      cuda-verison: '11.8.0'
                      rust-version: "stable"                      

                    # Windows portable with opencl
                    - platform: "windows-latest" # Windows x86_64
                      args: '--features="opencl,openblas"'
                      pre-build-args: "--portable --opencl --openblas"
                      name: portable
                      rust-version: "stable"

                    # Windows7 portable with opencl
                    - platform: "windows-latest" # Windows x86_64
                      args: '--features="opencl,openblas"'
                      pre-build-args: "--portable --opencl --openblas"
                      name: portable-win7
                      rust-version: "1.75"

        runs-on: ${{ matrix.platform }}
        steps:
            - uses: actions/checkout@v4

            - name: Add msbuild to PATH
              uses: microsoft/setup-msbuild@v2


            - name: Setup CUDA Toolkit
              if: contains(matrix.args, 'cuda')
              id: cuda-toolkit
              shell: pwsh
              run: scripts/setup_cuda.ps1
              env:
                  INPUT_CUDA_VERSION: ${{ matrix.cuda-verison }}

            - name: setup Bun
              uses: oven-sh/setup-bun@v1

            - name: Rust cache
              uses: swatinem/rust-cache@v2

            - name: Install Rust stable
              uses: dtolnay/rust-toolchain@stable

            - name: Install frontend dependencies
              run: bun install
              working-directory: ./desktop


            - name: Cache Pre Build
              id: cache-pre-build
              uses: actions/cache@v4
              with:
                  path: |
                      desktop/src-tauri/openblas
                      desktop/src-tauri/clblast
                      desktop/src-tauri/ffmpeg
                  key: ${{ runner.os }}-pre-build

            # Run pre build
            - name: Run pre_build.js
              run: bun scripts/pre_build.js ${{ matrix.pre-build-args }}


            - name: Build
              uses: tauri-apps/tauri-action@v0
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
                  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
              with:
                  projectPath: "./desktop"
                  tauriScript: bunx tauri
                  args: ${{ matrix.args }}


            - name: Rename Installer
              run: |
                # Get the list of exe files in the directory
                $exe_files = Get-ChildItem -Path "target\release\bundle\nsis\*.exe"

                # Rename each exe file
                foreach ($file in $exe_files) {
                    # Split the file name and extension
                    $name = $file.BaseName
                    $ext = $file.Extension

                    # New file name
                    $suffix = "${{ matrix.name }}"
                    $new_name = "{0}_{1}{2}" -f $name, $suffix, $ext

                    # Rename the file
                    Rename-Item -Path $file.FullName -NewName $new_name
                    Write-Output "Renamed '$($file.FullName)' to '$new_name'"
                }
              shell: pwsh

              
            - name: Upload installer
              if: github.event.inputs.skip-publish != '1'
              run: |
                bun scripts/publish.js target/release/bundle/nsis/*.exe
              shell: pwsh
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
